name: Build

on: [push, pull_request]

jobs:
  build_linux:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-20.04
            cuda: "11.6"
            arch: 86
            python_version: "3.10" 

    steps:
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y --no-install-recommends\
          build-essential \
          autoconf \
          automake \
          libtool \
          pkg-config \
          gcc \
          g++ \
          software-properties-common \
          apt-transport-https \
          ca-certificates \
          wget \
          gdb \
          valgrind \
          locales \
          locales-all &&\
          apt-get clean 
      
      - name: Set env
        run: echo "APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=1" >> $GITHUB_ENV

      - name: Install cmake
        run: wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | sudo apt-key add - &&\
             apt-add-repository "deb https://apt.kitware.com/ubuntu/ bionic main" &&\
             apt-get update &&\
             apt-get install -y cmake 

      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install CUDA
        env:
          cuda: ${{ matrix.cuda }}
        run: ./action_scripts/install_cuda_ubuntu.sh
        shell: bash
      
      # Used to host cibuildwheel
      - name: Install cibuildwheel
        run: python3 -m pip install cibuildwheel==2.11.2

      - name: Build wheels
        run: python3 -m cibuildwheel --output-dir wheelhouse
        env:
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
          CIBW_SKIP: "*musllinux*"
          CIBW_BUILD_VERBOSITY: 1

      - uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl

  # build_macos:
  #   name: Build wheels on ${{ matrix.os }}
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       os: [macos-11]
  #       python_version: ["3.10"]

  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         submodules: recursive

  #     # Used to host cibuildwheel
  #     - name: Set up Python ${{ matrix.python-version }}
  #       uses: actions/setup-python@v3
  #       with:
  #         python-version: ${{ matrix.python-version }}

  #     - name: Install cibuildwheel
  #       run: python3 -m pip install cibuildwheel==2.11.2

  #     - name: Build wheels
  #       run: python3 -m cibuildwheel --output-dir wheelhouse
  #       env:
  #         CIBW_ARCHS_MACOS: x86_64 arm64
  #         CIBW_BUILD_VERBOSITY: 1

  #     - uses: actions/upload-artifact@v3
  #       with:
  #         path: ./wheelhouse/*.whl


  # build_sdist:
  #   name: Build SDist
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       os: [ubuntu-20.04, macos-11]
  #       python-version: ["3.10"]

  #   steps:
  #   - uses: actions/checkout@v3
  #     with:
  #       submodules: recursive

  #   - name: Set up Python ${{ matrix.python-version }}
  #     uses: actions/setup-python@v3
  #     with:
  #       python-version: ${{ matrix.python-version }}

  #   - name: Install dependencies
  #     run: |
  #       python3 -m pip install --upgrade pip

  #   - name: Build SDist
  #     run: |
  #       python3 -m pip install setuptools wheel twine
  #       python3 setup.py sdist

  #   - uses: actions/upload-artifact@v3
  #     with:
  #       path: dist/*.tar.gz

  # upload_pypi:
  #   needs: [build_linux, build_macos, build_sdist]
  #   runs-on: ubuntu-latest

  #   # upload to PyPI on every tag starting with 'v'
  #   #if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
  #   # alternatively, to publish when a GitHub Release is created, use the following rule:
  #   # if: github.event_name == 'release' && github.event.action == 'published'
  #   steps:
  #     - uses: actions/download-artifact@v3
  #       with:
  #         # unpacks default artifact into dist/
  #         # if `name: artifact` is omitted, the action will create extra parent dir
  #         name: artifact
  #         path: dist

  #     - uses: pypa/gh-action-pypi-publish@v1.5.0
  #       with:
  #         user: __token__
  #         password: ${{ secrets.TEST_PYPI_PASSWORD }}
  #         repository_url: https://test.pypi.org/legacy/
  #         skip_existing: true
  #         verbose: true