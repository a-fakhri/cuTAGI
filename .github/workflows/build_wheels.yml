name: Build

on: [push, pull_request]

jobs:
  build_linux:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-20.04
            cuda: "11.3"
            python_version: "3.10" 
            
          - os: ubuntu-20.04
            cuda: "11.3"
            python_version: "3.9" 
    steps:
      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v1.13
        with:
          cmake-version: '3.23.x'

      - name: Use cmake
        run: cmake --version

      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Set up Python ${{ matrix.python_version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python_version }}

      - name: Install CUDA
        env:
          cuda: ${{ matrix.cuda }}
        run: .extern/action_scripts/install_cuda_ubuntu.sh
        shell: bash
      
      - name: Install dependencies
        run: pip install wheel 

      - name: Build wheels
        run: python setup.py bdist_wheel --plat-name=manylinux2014_x86_64

      - uses: actions/upload-artifact@v3
        with:
          path: dist/*.whl

  # build_macos:
  #   name: Build wheels on ${{ matrix.os }}
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       os: [macos-11]
  #       python_version: ["3.9", "3.10", "3.11"]
  #       cibuildwheel_python: ["cp39-*", "cp310-*", "cp311-*"]

  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         submodules: recursive

  #     # Used to host cibuildwheel
  #     - name: Set up Python ${{ matrix.python_version }}
  #       uses: actions/setup-python@v3
  #       with:
  #         python-version: ${{ matrix.python_version }}

  #     - name: Install cibuildwheel
  #       run: python3 -m pip install cibuildwheel==2.11.2

  #     - name: Build wheels
  #       run: python3 -m cibuildwheel --output-dir wheelhouse
  #       env:
  #         CIBW_BUILD: ${{ matrix.cibuildwheel_python }}
  #         CIBW_ARCHS_MACOS: x86_64 arm64
  #         CIBW_BUILD_VERBOSITY: 1

  #     - uses: actions/upload-artifact@v3
  #       with:
  #         path: ./wheelhouse/*.whl


  build_sdist:
    name: Build SDist
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04]
        python_version: ["3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Set up Python ${{ matrix.python_version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python_version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip

    - name: Build SDist
      run: |
        python -m pip install setuptools wheel twine
        python setup.py sdist

    - uses: actions/upload-artifact@v3
      with:
        path: dist/*.tar.gz

  upload_pypi:
    needs: [build_linux, build_sdist]
    runs-on: ubuntu-latest

    # upload to PyPI on every tag starting with 'v'
    #if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    # alternatively, to publish when a GitHub Release is created, use the following rule:
    # if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - uses: actions/download-artifact@v3
        with:
          # unpacks default artifact into dist/
          # if `name: artifact` is omitted, the action will create extra parent dir
          name: artifact
          path: dist

      - uses: pypa/gh-action-pypi-publish@v1.5.0
        with:
          user: __token__
          password: ${{ secrets.TEST_PYPI_PASSWORD }}
          repository_url: https://test.pypi.org/legacy/
          skip_existing: true
          verbose: true